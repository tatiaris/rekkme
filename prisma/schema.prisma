generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model user {
  id            String          @id @default(dbgenerated()) @map("_id") @db.ObjectId
  email         String          @unique
  fname         String
  lname         String
  username      String
  rekpoints     Int             @default(0)
  kos           Int             @default(0)
  friends       String[]
  lastlogin     DateTime        @default(now())
  userrekqueue  userrekqueue    @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userrekqueueid String         @db.ObjectId
}

model auth {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  uid      String @unique
  password String
}

model admin {
  id  String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  uid String @unique
}

model reks {
  id              String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
  touserid        String         @db.ObjectId
  fromuserid      String         @db.ObjectId
  category        category       @relation(fields: [categoryid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categoryid      String         @db.ObjectId
  content         String
  wager           Int            @default(0)
  createdat       DateTime       @default(now())
  comments        comment[]
}

model comment {
  id      String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  message String
  rek     reks   @relation(fields: [rekid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rekid   String @db.ObjectId
  user    user   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userid  String @db.ObjectId
}

model rekresult {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  rek       reks     @relation(fields: [rekid], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rekid     String   @db.ObjectId
  result    Int      @default(0)
  ko        Boolean  @default(false)
  createdat DateTime @default(now())
}

model userrekqueue {
  id     String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  reks   String[]
}

model category {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name String
}

///model tags {
///  id         String @id @default(dbgenerated()) @map("_id") @db.ObjectId
///  namme      String
///}

///model rektaglinks {
///  tag        tags @relation(fields: [tagid], references: [id])
///  tagid      String @db.ObjectId
///  rek        reks @relation(fields: [rekid], references: [id])
///  rekid      String @db.ObjectId
///  @@id([tagid, rekid])
///}
